@page "/weather"
@* @using Syncfusion.Blazor.Inputs *@
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>


<input class="form-control" style="width: 300px;" placeholder="Filtr by summary:" @oninput="@Input" />




@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }

        </tbody>
    </table>
    <p role="status">Number of warm days: @warmdays</p>

    <button class="btn btn-primary" @onclick="Filtr">Filter out cold days</button>
    <button class="btn btn-primary" @onclick="Reverse">Reverse all days list</button>
}

@code 
{
    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? forecastsFiltered;
    private WeatherForecast[]? forecastsOriginal;
    private int warmdays = 0;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };

        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();


        foreach (var forecast in forecasts) if (forecast.TemperatureC > 15) warmdays++;
        forecastsOriginal = forecasts;
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    void Filtr()
    {
        forecasts = forecasts.Where(s => s.TemperatureC < 15).ToArray();
        forecastsFiltered = forecasts;
        warmdays = 0;
    }

    void Reverse()
    {
        forecasts = forecastsOriginal;
        forecastsFiltered = forecastsOriginal;
        warmdays = 0;
        foreach (var forecast in forecasts) if (forecast.TemperatureC > 15) warmdays++;
    }

    private void Input(ChangeEventArgs arg)
    {
        forecasts = forecastsFiltered.Where(s => s.Summary.Contains(arg.Value.ToString())).ToArray();
    }

}
